AWSTemplateFormatVersion: 2010-09-09
Description: Creates CodePipeline for Database Migration Service (qs-1qcbthe7t)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Database Migration Service Endpoints
        Parameters:
          - DmsSourceArn
          - DmsTargetArn
          - DmsReplicationArn
          - TaskName
          - FullLoadOnly
      - Label:
          default: Target RDS Access and Credentials
        Parameters:
          - TargetEndpoint
          - TargetDbName
          - TargetDbUser
          - TargetDbPassword
      - Label:
          default: Source RDS Access and Credentials (optional)
        Parameters:
          - CreateSample
          - SourceEndpoint
          - SourceDbName
          - SourceDbUser
          - SourceDbPassword
      - Label:
          default: CodeBuild Configuration and Environment
        Parameters:
          - CodeBuildSecurityGroup
          - CodeBuildSubnet
          - CodeBuildVpc
      - Label:
          default: CodePipeline Source Configuration
        Parameters:
          - S3BucketName
          - S3BucketKey
      - Label:
          default: Migration Notifications
        Parameters:
          - MigNotify
    ParameterLabels:
      CreateSample:
        default: Create Sample Source?
      FullLoadOnly:
        default: Full Load Only?
      MigNotify:
        default: Email address
      TaskName:
        default: DMS Task Name
      CodeBuildVpc:
        default: VPC used by CodeBuild
      CodeBuildSubnet:
        default: SubnetID
      CodeBuildSecurityGroup:
        default: Security Group
      S3BucketName:
        default: S3 Bucket
      S3BucketKey:
        default: S3 Key
      TargetEndpoint:
        default: RDS Endpoint
      TargetDbName:
        default: Database Name
      TargetDbUser:
        default: Database Username
      TargetDbPassword:
        default: Database Password
      SourceDbPassword:
        default: Source Database Password
      SourceEndpoint:
        default: Source RDS Endpoint
      SourceDbName:
        default: Source Database Name
      SourceDbUser:
        default: Source Database Username
      DmsSourceArn:
        default: Source Endpoint Arn
      DmsTargetArn:
        default: Target Endpoint Arn
      DmsReplicationArn:
        default: Replication instance Arn
Conditions:
  cTaskName:
    Fn::Equals:
      - Ref: TaskName
      - ''
  cCdc:
    Fn::Equals:
      - Ref: FullLoadOnly
      - 'no'
  cCreateSource:
    Fn::Equals:
      - Ref: CreateSample
      - 'yes'
Parameters:
  CreateSample:
    Type: String
    Description: Please choose this option if you want to populate source database
    AllowedValues:
      - 'yes'
      - 'no'
    Default: 'no'
  FullLoadOnly:
    Type: String
    Description: This is for task to do only full loads and not CDC
    AllowedValues:
      - 'yes'
      - 'no'
    Default: 'no'
  MigNotify:
    Type: String
    Description: This email will get notifications on Migration Status
  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group used by CodeBuild. Please ensure that this has access to RDS endpoint
  CodeBuildSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Private subnet id with NAT gateway where codebuild will be launched
  CodeBuildVpc:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id where codebuild will be launched. Subnet and security group should belong to this VPC.
  S3BucketKey:
    Type: String
    Description: The location of file which is used as source for CodePipeline
  S3BucketName:
    Type: String
    Description: The name of the S3 bucket where the code resides. This will be used as source for the CodePipeline
  TargetEndpoint:
    Type: String
    Description: RDS Target endpoint where the schema changes will take place
  TargetDbName:
    Type: String
    Description: RDS Target database name for deployments
  TargetDbPassword:
    Type: String
    Description: RDS Target database user password for deployment
    NoEcho: 'true'
  TargetDbUser:
    Type: String
    Description: RDS Target database user name
  SourceEndpoint:
    Type: String
    Description: RDS Source endpoint where the schema changes will take place
  SourceDbName:
    Type: String
    Description: RDS Source database name for deployments
  SourceDbPassword:
    Type: String
    Description: RDS Source database user password for deployment
    NoEcho: 'true'
  SourceDbUser:
    Type: String
    Description: RDS Source database user name
  TaskName:
    Type: String
    Description: Name of DMS task. If left blank stack name will be used.
  DmsSourceArn:
    Type: String
    Description: DMS Arn of source endpoint
  DmsTargetArn:
    Type: String
    Description: DMS Arn of target endpoint
  DmsReplicationArn:
    Type: String
    Description: DMS Replication Arn used for migration
Resources:
  DmsPipelineEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: EventRule
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        detail:
          state:
            - FAILED
          pipeline:
            - Ref: DmsPipeline
      State: ENABLED
      Targets:
        - Arn:
            Ref: MigrationNotification
          Id: MigrationPipeline
  MigrationNotification:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            Ref: MigNotify
          Protocol: email
  MigrationNotificationPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: '*'
      Topics:
        - Ref: MigrationNotification
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  DmsPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location:
          Ref: ArtifactStoreS3Location
        Type: S3
      RoleArn:
        Fn::GetAtt:
          - DmsPipelineRole
          - Arn
      Stages:
        - Actions:
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                PollForSourceChanges: true
                S3Bucket:
                  Ref: S3BucketName
                S3ObjectKey:
                  Ref: S3BucketKey
              Name: Source
              OutputArtifacts:
                - Name: AppSource
              RunOrder: 1
          Name: Source
        - Fn::If:
            - cCreateSource
            - Actions:
                - ActionTypeId:
                    Category: Build
                    Owner: AWS
                    Provider: CodeBuild
                    Version: '1'
                  Configuration:
                    ProjectName:
                      Ref: CodeBuildSetupSample
                  InputArtifacts:
                    - Name: AppSource
                  Name: SetupSource
                  RunOrder: 1
              Name: Sample
            - Ref: AWS::NoValue
        - Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName:
                  Ref: CodeBuildSetupTarget
              InputArtifacts:
                - Name: AppSource
              Name: SetupTarget
              OutputArtifacts:
                - Name: AppBuild
              RunOrder: 1
          Name: Setup
        - Actions:
            - ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                NotificationArn:
                  Ref: SnsApproval
              Name: ApprovalForDMS
              RunOrder: 1
          Name: Approve
        - Fn::If:
            - cCdc
            - Actions:
                - ActionTypeId:
                    Category: Build
                    Owner: AWS
                    Provider: CodeBuild
                    Version: '1'
                  Configuration:
                    ProjectName:
                      Ref: CodeBuildPreCdc
                  InputArtifacts:
                    - Name: AppSource
                  Name: SetupTarget
                  RunOrder: 1
              Name: PreCDC
            - Ref: AWS::NoValue
  DmsPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: codepipeline-policy
          PolicyDocument:
            Statement:
              - Action:
                  - s3:*
                  - sns:*
                  - sqs:*
                Effect: Allow
                Resource: '*'
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Effect: Allow
                Resource: '*'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  CodeBuildSetupTarget:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Target and DMS task setup
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: PGPASSWORD
            Type: PARAMETER_STORE
            Value:
              Ref: TargetRdsPassword
          - Name: DB_NAME
            Type: PLAINTEXT
            Value:
              Ref: TargetDbName
          - Name: TARGET_ENDPOINT
            Type: PLAINTEXT
            Value:
              Ref: TargetEndpoint
          - Name: DB_USER
            Type: PLAINTEXT
            Value:
              Ref: TargetDbUser
          - Name: TASK_NAME
            Type: PLAINTEXT
            Value:
              Fn::If:
                - cTaskName
                - Ref: AWS::StackName
                - Ref: TaskName
          - Name: SOURCE_ENDPOINT_ARN
            Type: PLAINTEXT
            Value:
              Ref: DmsSourceArn
          - Name: TARGET_ENDPOINT_ARN
            Type: PLAINTEXT
            Value:
              Ref: DmsTargetArn
          - Name: REPLICATION_INSTANCE_ARN
            Type: PLAINTEXT
            Value:
              Ref: DmsReplicationArn
          - Name: SNS_TOPIC
            Type: PLAINTEXT
            Value:
              Ref: SnsApproval
          - Name: NOTIFY_SNS
            Type: PLAINTEXT
            Value:
              Ref: MigrationNotification
        Image: aws/codebuild/standard:1.0
        Type: LINUX_CONTAINER
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildServiceRole
          - Arn
      Source:
        BuildSpec: setup-target-schema.yml
        Type: CODEPIPELINE
      Tags:
        - Key: Key1
          Value: Value1
        - Key: Key2
          Value: Value2
      TimeoutInMinutes: 60
      VpcConfig:
        SecurityGroupIds:
          - Ref: CodeBuildSecurityGroup
        Subnets:
          - Ref: CodeBuildSubnet
        VpcId:
          Ref: CodeBuildVpc
  CodeBuildPreCdc:
    Type: AWS::CodeBuild::Project
    Condition: cCdc
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: DMS project to run before Change Data Capture (CDC) starts
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: PGPASSWORD
            Type: PARAMETER_STORE
            Value:
              Ref: TargetRdsPassword
          - Name: DB_NAME
            Type: PLAINTEXT
            Value:
              Ref: TargetDbName
          - Name: TARGET_ENDPOINT
            Type: PLAINTEXT
            Value:
              Ref: TargetEndpoint
          - Name: DB_USER
            Type: PLAINTEXT
            Value:
              Ref: TargetDbUser
          - Name: NOTIFY_SNS
            Type: PLAINTEXT
            Value:
              Ref: MigrationNotification
          - Name: TASK_NAME
            Type: PLAINTEXT
            Value:
              Fn::If:
                - cTaskName
                - Ref: AWS::StackName
                - Ref: TaskName
        Image: aws/codebuild/standard:1.0
        Type: LINUX_CONTAINER
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildServiceRole
          - Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: pre-CDC-build.yml
      Tags:
        - Key: Key1
          Value: Value1
        - Key: Key2
          Value: Value2
      TimeoutInMinutes: 10
      VpcConfig:
        SecurityGroupIds:
          - Ref: CodeBuildSecurityGroup
        Subnets:
          - Ref: CodeBuildSubnet
        VpcId:
          Ref: CodeBuildVpc
  CodeBuildSetupSample:
    Type: AWS::CodeBuild::Project
    Condition: cCreateSource
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: DMS project to populate source database
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: DB_PASSWORD
            Type: PARAMETER_STORE
            Value:
              Ref: SourceRdsPassword
          - Name: DB_NAME
            Type: PLAINTEXT
            Value:
              Ref: SourceDbName
          - Name: DB_HOST
            Type: PLAINTEXT
            Value:
              Ref: SourceEndpoint
          - Name: DB_USER
            Type: PLAINTEXT
            Value:
              Ref: SourceDbUser
          - Name: NOTIFY_SNS
            Type: PLAINTEXT
            Value:
              Ref: MigrationNotification
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
      ServiceRole:
        Fn::GetAtt:
          - CodeBuildServiceRole
          - Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: "version: 0.2\nphases:\n  install:\n    runtime-versions:\n      python: 3.8\n    commands:\n    - pip3 install awscli --upgrade\n    - yum install git which -y\n    - yum install -y\
          \ http://yum.oracle.com/repo/OracleLinux/OL7/oracle/instantclient/x86_64/getPackage/oracle-instantclient18.3-basic-18.3.0.0.0-3.x86_64.rpm\n    - yum install -y http://yum.oracle.com/repo/OracleLinux/OL7/oracle/instantclient/x86_64/getPackage/oracle-instantclient18.3-devel-18.3.0.0.0-3.x86_64.rpm\n\
          \    - yum install -y http://yum.oracle.com/repo/OracleLinux/OL7/oracle/instantclient/x86_64/getPackage/oracle-instantclient18.3-sqlplus-18.3.0.0.0-3.x86_64.rpm\n    - echo /usr/lib/oracle/18.3/client64/lib\
          \ > /etc/ld.so.conf.d/oracle-instantclient18.3.conf && ldconfig\n    - ls /etc/ld.so.conf.d/\n    - PATH=$PATH:/usr/lib/oracle/18.3/client64/bin\n    - which sqlplus\n  build:\n    commands:\n\
          \      - git clone https://github.com/aws-samples/aws-database-migration-samples.git\n      - cd aws-database-migration-samples/oracle/sampledb/v1\n      - echo \"drop index dms_sample.set_ev_id_tkholder_id_idx;\"\
          \ >> install-rds.sql\n      - echo \"create index dms_sample.set_ev_id_tkholder_id_idx on dms_sample.sporting_event_ticket(sporting_event_id,ticketholder_id);\" >> install-rds.sql\n      - echo\
          \ \"drop index dms_sample.se_start_date_fcn;\" >> install-rds.sql\n      - echo \"create index dms_sample.se_start_date_fcn on dms_sample.sporting_event(start_date_time);\" >> install-rds.sql\n\
          \      - echo \"alter table dms_sample.sport_location modify (id number);\" >> install-rds.sql\n      - echo \"exit;\" >> install-rds.sql\n      - sqlplus $DB_USER/$DB_PASSWORD@$DB_HOST/$DB_NAME\
          \ @install-rds.sql\n"
      Tags:
        - Key: Created by
          Value:
            Fn::Sub: ${AWS::StackName}
      TimeoutInMinutes: 100
      VpcConfig:
        SecurityGroupIds:
          - Ref: CodeBuildSecurityGroup
        Subnets:
          - Ref: CodeBuildSubnet
        VpcId:
          Ref: CodeBuildVpc
  TargetRdsPassword:
    Type: AWS::SSM::Parameter
    Properties:
      Description: SSM Parameter for RDS Password.
      Name:
        Fn::Sub: DMS-${AWS::StackName}
      Type: String
      Value:
        Ref: TargetDbPassword
  SourceRdsPassword:
    Type: AWS::SSM::Parameter
    Condition: cCreateSource
    Properties:
      Description: SSM Parameter for Source RDS Password.
      Name:
        Fn::Sub: DMS-${AWS::StackName}-source
      Type: String
      Value:
        Ref: SourceDbPassword
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName:
            Fn::Sub: Codebuild-${AWS::StackName}-${AWS::Region}-policy
          PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetBucketVersioning
                  - s3:GetObjectVersion
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:s3:::${ArtifactStoreS3Location}*
              - Action:
                  - dms:StartReplicationTask
                  - dms:CreateReplicationTask
                  - dms:CreateEventSubscription
                  - dms:Describe*
                Effect: Allow
                Resource: '*'
              - Action: ssm:GetParameters
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${TargetRdsPassword}
                  - Fn::If:
                      - cCreateSource
                      - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SourceRdsPassword}
                      - Ref: AWS::NoValue
              - Action:
                  - sns:GetTopicAttributes
                  - sns:Subscribe
                Effect: Allow
                Resource:
                  Ref: SnsApproval
              - Action:
                  - sns:Publish
                Effect: Allow
                Resource:
                  Ref: MigrationNotification
              - Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                Effect: Allow
                Resource: '*'
              - Action:
                  - ec2:CreateNetworkInterfacePermission
                Condition:
                  StringEquals:
                    ec2:AuthorizedService: codebuild.amazonaws.com
                    ec2:Subnet:
                      - Fn::Sub: arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${CodeBuildSubnet}
                Effect: Allow
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
            Version: 2012-10-17
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  ArtifactStoreS3Location:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: Solution
          Value:
            Fn::Sub: Artifact store for - ${AWS::StackName}
      VersioningConfiguration:
        Status: Enabled
  SnsApproval:
    Type: AWS::SNS::Topic
  CodepipelineExecutionToken:
    Type: AWS::SSM::Parameter
    Properties:
      Description: SSM Parameter for CodePipeline token.
      Name:
        Fn::Sub: pCodePipelineToken-${AWS::StackName}
      Type: String
      Value: default
  MigrationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName:
            Fn::Sub: lambda-${AWS::StackName}-${AWS::Region}-policy
          PolicyDocument:
            Statement:
              - Action: codepipeline:PutApprovalResult
                Effect: Allow
                Resource: '*'
              - Action:
                  - sns:Publish
                Effect: Allow
                Resource:
                  Ref: MigrationNotification
              - Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Effect: Allow
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CodepipelineExecutionToken}
            Version: 2012-10-17
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  MigrationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "import boto3\nimport json\nimport os\nssm = boto3.client('ssm')\n sns = boto3.client('sns')\ncodepipeline = boto3.client('codepipeline')\n ssm_parameter = os.environ['codepipeline_token']\n\
          pipeline_name = os.environ['pipeline_name']\n task_name = os.environ['dms_task'].lower()\ntopic = os.environ['notify_topic']\n def lambda_handler(event, context):\n  print('Received event: %s'\
          \ % json.dumps(event, indent=2))\n  str_subject = event['Records'][0]['Sns']['Subject']\n  if 'APPROVAL NEEDED' in str_subject:\n    print('This is a Codepipeline approval action')\n    str_sns\
          \ = event['Records'][0]['Sns']['Message']\n    sns_msg = json.loads(str_sns)\n    pipeline = sns_msg['approval']['pipelineName']\n    stage = sns_msg['approval']['stageName']\n    action = sns_msg['approval']['actionName']\n\
          \    token = sns_msg['approval']['token']\n    approve_param =\"pipelineName='%s',stageName='%s',actionName='%s',token='%s'\" % ( pipeline , stage , action , token)\n    print(approve_param)\n\
          \    response = ssm.put_parameter(Name=ssm_parameter,\n        Value=approve_param,\n        Type='String',\n        Overwrite=True\n        )\n  elif 'DMS' in str_subject:\n    print('This is\
          \ a message from DMS')\n    str_sns = event['Records'][0]['Sns']['Message']\n    if 'attempt' in str_sns:\n      print(str_sns)\n      print('Event notification nothing will be done')\n    else:\n\
          \      sns_msg = json.loads(str_sns)\n      print(sns_msg['Event Message'])\n      dms_status = sns_msg['Event Message']\n      if 'STOPPED_AFTER_FULL_LOAD' in dms_status:\n        print('DMS\
          \ task replication is stopped after full load, proceeding to put an approval in Codepipeline')\n        result_pipeline('Approved')\n      elif 'started' in dms_status:\n        print('Lambda\
          \ will do nothing at this step as the task is started')\n      elif 'Create' in dms_status:\n        print('Lambda will do nothing at this step as the task is created')\n      elif 'FAIL' in dms_status.upper():\n\
          \        status = 'DMS task failed. Please check the task'\n        print(status)\n        subj = 'Status Update on DMS Task ' + task_name\n        sns.publish(TopicArn = topic, Message = status,\
          \ Subject = subj)\n        result_pipeline('Rejected')\n      else:\n        status = 'DMS task did not stop or errored out after full load. Please check the task'\n        print(status)\n   \
          \     subj = 'Status Update on DMS Task ' + task_name\n        sns.publish(TopicArn = topic, Message = status, Subject = subj)\n        result_pipeline('Rejected')\n  else:\n    print('This message\
          \ is from neither Codepipeline Approval or DMS event. Nothing will be done')\ndef result_pipeline(event):\n  print('Getting Codepipeline parameters from SSM to put a %s' %(event))\n  codepipeline_params\
          \ = ssm.get_parameter(Name=ssm_parameter)['Parameter']['Value'].split(\"'\")\n  print(codepipeline_params)\n  result_reponse = codepipeline.put_approval_result(\n      pipelineName=codepipeline_params[1],\n\
          \      stageName=codepipeline_params[3],\n      actionName=codepipeline_params[5],\n      result={\n          'summary': event,\n          'status': event\n      },\n      token=codepipeline_params[7]\n\
          \  )\n  print(result_reponse)\n"
      Environment:
        Variables:
          codepipeline_token:
            Ref: CodepipelineExecutionToken
          pipeline_name:
            Ref: DmsPipeline
          dms_task:
            Fn::If:
              - cTaskName
              - Ref: AWS::StackName
              - Ref: TaskName
          notify_topic:
            Ref: MigrationNotification
      Handler: index.lambda_handler
      Runtime: python3.9
      Role:
        Fn::GetAtt:
          - MigrationLambdaRole
          - Arn
      Timeout: 300
  CheckEndpointConnection:
    Type: Custom::DmsEndpointConnectionTester
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - DmsEndpointConnTest
          - Arn
      SourceArn:
        Ref: DmsSourceArn
      TargetArn:
        Ref: DmsTargetArn
      ReplicationInstanceArn:
        Ref: DmsReplicationArn
  DmsEndpointConnTestRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: dms-connection-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dms:DescribeConnections
                  - dms:TestConnection
                Resource: '*'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  DmsEndpointConnTest:
    Type: AWS::Lambda::Function
    Properties:
      Description: Checks the connection between DMS replication instance and DMS endpoint
      Handler: index.lambda_handler
      Runtime: python3.7
      Role:
        Fn::GetAtt:
          - DmsEndpointConnTestRole
          - Arn
      Timeout: 900
      Code:
        ZipFile: "import cfnresponse\nimport json\nimport boto3\n\ndef lambda_handler(event, context):\n    print('Received event: %s' % json.dumps(event, indent=2))\n    source_endpoint = event['ResourceProperties']['SourceArn']\n\
          \    target_endpoint = event['ResourceProperties']['TargetArn']\n    replication_inst = event['ResourceProperties']['ReplicationInstanceArn']\n    try:\n      if (event['RequestType'] == 'Create')\
          \ or (event['RequestType'] == 'Update'):\n          print ('This is a %s event' %(event['RequestType']))\n          print('Checking connection for Source .....')\n          source_result = check_connection(source_endpoint,replication_inst)\n\
          \          print('Source result was %s' %(source_result))\n          if 'success' in source_result:\n              print('Proceeding to check connection for Target ....')\n              target_result\
          \ = check_connection(target_endpoint,replication_inst)\n              print('Target result was %s' %(target_result))\n              if 'success' in target_result:\n                  cfnresponse.send(event,\
          \ context, cfnresponse.SUCCESS, {}, '')\n              else:\n                  print('Target connection failed')\n                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, '')\n\
          \          else:\n              print('Source connection failed')\n              cfnresponse.send(event, context, cfnresponse.FAILED, {}, '')\n      elif event['RequestType'] == 'Delete':\n  \
          \        print('Delete event nothing will be done')\n          cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')\n    except Exception as e:\n      print(e)\n      cfnresponse.send(event,\
          \ context, cfnresponse.FAILED, {}, '')\ndef check_connection(endpoint,rep):\n    dms = boto3.client('dms')\n    dms.test_connection(ReplicationInstanceArn=rep,EndpointArn=endpoint)\n    waiter\
          \ = dms.get_waiter('test_connection_succeeds')\n    waiter.wait(\n        Filters=[\n            {\n                'Name': 'endpoint-arn',\n                'Values': [endpoint]\n            },\n\
          \            {\n                'Name': 'replication-instance-arn',\n                'Values':[rep]\n            }\n        ]\n    )\n    status_conn_api = dms.describe_connections(\n        Filters=[\n\
          \            {\n                'Name': 'endpoint-arn',\n                'Values': [endpoint]\n            },\n            {\n                'Name': 'replication-instance-arn',\n            \
          \    'Values': [rep]\n            }\n        ]\n    )\n    stat_task = status_conn_api['Connections'][0]['Status']\n    print('The connection test was %s' %(stat_task))\n    return (stat_task)\n"
  LambdaPermissionGrantSNS:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - MigrationLambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: SnsApproval
  SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint:
        Fn::GetAtt:
          - MigrationLambdaFunction
          - Arn
      TopicArn:
        Ref: SnsApproval
  SnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Id: __default_policy_ID
        Statement:
          - Sid:
              Fn::Sub: SNS-${AWS::StackName}-${AWS::Region}-policy
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - SNS:AddPermission
              - SNS:RemovePermission
              - SNS:DeleteTopic
              - SNS:Subscribe
              - SNS:ListSubscriptionsByTopic
              - SNS:Publish
              - SNS:Receive
            Resource: '*'
            Condition:
              StringEquals:
                AWS:SourceOwner:
                  Ref: AWS::AccountId
          - Sid: dms-allow-publish
            Effect: Allow
            Principal:
              Service: dms.amazonaws.com
            Action: sns:Publish
            Resource:
              Ref: SnsApproval
      Topics:
        - Ref: SnsApproval
  ArtifactStoreCleanUp:
    Type: Custom::S3CleanUp
    Properties:
      DestBucket:
        Ref: ArtifactStoreS3Location
      ServiceToken:
        Fn::GetAtt:
          - S3CleanUpFunction
          - Arn
  S3CleanUpRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:DeleteObjectVersion
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Effect: Allow
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:s3:::${ArtifactStoreS3Location}*
            Version: 2012-10-17
          PolicyName: S3CleanupPolicy
  S3CleanUpFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Empty the S3 Buckets while deleting the Stack
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - S3CleanUpRole
          - Arn
      Runtime: python3.9
      Timeout: 240
      Code:
        ZipFile: "import boto3\nimport cfnresponse\nimport json\n\ndef lambda_handler(event, context):\n  try:\n    bucketcfn=event['ResourceProperties']['DestBucket']\n    responseData = {}\n    print('Received\
          \ event: %s' % json.dumps(event, indent=2))\n    if event['RequestType'] == 'Create':\n      print('Create stack operation nothing will be done')\n      print(bucketcfn)\n    elif event['RequestType']\
          \ == 'Delete':\n      s3 = boto3.resource('s3')\n      bucket = s3.Bucket(bucketcfn)\n      bucket.object_versions.all().delete()\n      print('Delete stack in progress the bucket is emptied')\n\
          \    elif event['RequestType'] == 'Update':\n      print('Update stack')\n    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')\n  except Exception as e:\n    print(e)\n    cfnresponse.send(event,\
          \ context, cfnresponse.FAILURE, {}, '')\n"
  DmsTaskCleanupRole:
    Condition: cCreateSource
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: dms-connection-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dms:Describe*
                  - dms:DeleteReplicationTask
                  - dms:StopReplicationTask
                Resource: '*'
        - PolicyName: codebuild-cleanup
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StopBuild
                  - codebuild:BatchDeleteBuilds
                  - codebuild:ListBuildsForProject
                  - codebuild:BatchGetBuilds
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildSetupTarget}
                  - Fn::If:
                      - cCreateSource
                      - Fn::Sub: arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildSetupSample}
                      - Ref: AWS::NoValue
                  - Fn::If:
                      - cCdc
                      - Fn::Sub: arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildPreCdc}
                      - Ref: AWS::NoValue
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  DmsCleanupResource:
    Condition: cCreateSource
    Type: Custom::DmsCleanupResource
    DependsOn:
      - CleanupVpc
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - DmsCleanupFunction
          - Arn
      TaskName:
        Fn::If:
          - cTaskName
          - Ref: AWS::StackName
          - Ref: TaskName
      SampleCodeBuild:
        Fn::If:
          - cCreateSource
          - Ref: CodeBuildSetupSample
          - Ref: AWS::NoValue
      PreCDC:
        Fn::If:
          - cCdc
          - Ref: CodeBuildPreCdc
          - Ref: AWS::NoValue
      SetupTarget:
        Ref: CodeBuildSetupTarget
  DmsCleanupFunction:
    Condition: cCreateSource
    Type: AWS::Lambda::Function
    Properties:
      Description: Cleans up the DMS replication task
      Handler: index.lambda_handler
      Runtime: python3.7
      Role:
        Fn::GetAtt:
          - DmsTaskCleanupRole
          - Arn
      Timeout: 900
      Code:
        ZipFile: "import cfnresponse\nimport json\nimport boto3\nimport time\nimport botocore\n\ndms = boto3.client('dms')\ncodebuild = boto3.client('codebuild')\n def lambda_handler(event, context):\n\
          \  task_name = event['ResourceProperties']['TaskName'].lower()\n  sample = event['ResourceProperties']['SampleCodeBuild']\n  precdc = event['ResourceProperties']['PreCDC']\n  setup = event['ResourceProperties']['SetupTarget']\n\
          \  print('Received event: %s' % json.dumps(event, indent=2))\n  try:\n    if event['RequestType'] == 'Delete':\n      time.sleep(5)\n      print('Delete event. Task and Codebuild will be stopped\
          \ and deleted')\n      print('The task name is %s' %(task_name))\n      if sample:\n        cleanup_codebuild(sample)\n      else:\n        print('No sample')\n      if precdc:\n        cleanup_codebuild(precdc)\n\
          \      else:\n        print('Full Load only')\n      cleanup_codebuild(setup)\n      try:\n\n        task_des = dms.describe_replication_tasks(Filters=[{'Name': 'replication-task-id','Values':[task_name]}])\n\
          \        task_arn = task_des['ReplicationTasks'][0]['ReplicationTaskArn']\n        print('The task arn is %s' %(task_arn))\n\n        dms.stop_replication_task(ReplicationTaskArn=task_arn)\n \
          \       waiter_stop = dms.get_waiter('replication_task_stopped')\n        waiter_stop.wait(Filters=[{'Name': 'replication-task-arn','Values':[task_arn]}])\n        dms.delete_replication_task(ReplicationTaskArn=task_arn)\n\
          \        waiter = dms.get_waiter('replication_task_deleted')\n        waiter.wait(Filters=[{'Name': 'replication-task-arn','Values':[task_arn]}])\n      except botocore.exceptions.ClientError\
          \ as e:\n        if e.response['Error']['Code'] == 'ResourceNotFoundFault':\n          print('Task was not found. Proceeding with delete')\n        else:\n          raise\n      cfnresponse.send(event,\
          \ context, cfnresponse.SUCCESS, {}, '')\n      \n    else:\n      print ('This is a %s event. Nothing will be done' %(event['RequestType']))\n      print ('Task name is %s' %(task_name))\n   \
          \   cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')\n  except Exception as e:\n    print(e)\n    cfnresponse.send(event, context, cfnresponse.FAILED, {}, '')\ndef cleanup_codebuild(proj):\n\
          \  try:\n    r = codebuild.list_builds_for_project(projectName=proj)\n    if r['ids']:\n      for build_id in r['ids']:\n        print('Stopping build %s' %(build_id))\n        s = codebuild.stop_build(id=build_id)\n\
          \        i = 0\n        while i < 10:\n          time.sleep(6)\n          i = i + 1\n          t = codebuild.batch_get_builds(ids=[build_id])\n          status = t['builds'][0]['buildStatus']\n\
          \          if status in ['STOPPED','SUCCEEDED']:\n            print('Build stopped %s' %(build_id))\n            break\n        print('Deleting build %s' %(build_id))\n        del_build = codebuild.batch_delete_builds(ids=[build_id])\n\
          \  except botocore.exceptions.ClientError as e:\n    if e.response['Error']['Code'] == 'ResourceNotFoundFault':\n      print('Build was not found. Proceeding with delete')\n    else:\n      print(e)\n\
          \      raise\n"
  CleanupVpcRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: ec2-read-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            - EIAMPolicyWildcardResource: Intent assumed for initial migration.
  CleanupVpc:
    Type: Custom::CleanupVpc
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CleanupVpcFunction
          - Arn
      SecurityGroup:
        Ref: CodeBuildSecurityGroup
  CleanupVpcFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "import cfnresponse\nimport boto3\nimport traceback\nimport json\n import time\n\nec2 = boto3.client('ec2')\ndef lambda_handler(event, context):\n    \n    try:\n        print('Received\
          \ event: %s' % json.dumps(event, indent=2))\n        sg = event['ResourceProperties']['SecurityGroup']\n        if event['RequestType'] == 'Delete':                    \n          time.sleep(60)\n\
          \          print('Delete stack call, network interfaces will be cleaned up.')\n          desc_net = ec2.describe_network_interfaces(Filters=[{'Name': 'group-id','Values': [sg]}])\n          for\
          \ net in desc_net['NetworkInterfaces']:\n            netid = net['NetworkInterfaceId']\n            print(netid)\n            if net['Status'] == 'available':\n              print(netid + ' is\
          \ available')\n              delete_net = ec2.delete_network_interface(NetworkInterfaceId=netid)\n        elif event['RequestType'] == 'Update':\n            print('Stack is getting updated nothing\
          \ will be done')\n        elif event['RequestType'] == 'Create':\n            print('Stack is getting created nothing will be done')\n        cfnresponse.send(event, context, cfnresponse.SUCCESS,\
          \ {}, '')\n    except:\n        print(traceback.print_exc())\n        cfnresponse.send(event, context, cfnresponse.FAILED, {}, '')\n"
      Role:
        Fn::GetAtt:
          - CleanupVpcRole
          - Arn
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 900
Outputs:
  DmsPipeline:
    Description: Pipeline for DMS tasks
    Value:
      Ref: DmsPipeline
  DmsPipelineRole:
    Description: IAM Role used by CodePipeline
    Value:
      Ref: DmsPipelineRole
  SnsTopicPolicy:
    Description: SNS Topic Policy for DMS and CodePipeline Events
    Value:
      Ref: SnsTopicPolicy
  SnsSubscription:
    Description: SNS Subscription to Lambda function
    Value:
      Ref: SnsSubscription
  MigrationLambdaFunction:
    Description: Lambda function for Approval Stage
    Value:
      Ref: MigrationLambdaFunction
  MigrationLambdaRole:
    Description: IAM role used by Lambda function
    Value:
      Ref: MigrationLambdaRole
  CodepipelineExecutionToken:
    Description: Execution token for Codepipeline Approval stage
    Value:
      Ref: CodepipelineExecutionToken
  SnsApproval:
    Description: SNS Topic for DMS and CodePipeline events
    Value:
      Ref: SnsApproval
  ArtifactStoreS3Location:
    Description: S3 bucket for Codepipeline artifacts
    Value:
      Ref: ArtifactStoreS3Location
  CodeBuildServiceRole:
    Description: CodeBuild service role
    Value:
      Ref: CodeBuildServiceRole
  CodeBuildPreCdc:
    Description: PreCDC CodeBuild Project
    Value:
      Fn::If:
        - cCdc
        - Ref: CodeBuildPreCdc
        - none
  CodeBuildSetupTarget:
    Description: SetupTarget CodeBuild Project
    Value:
      Ref: CodeBuildSetupTarget
